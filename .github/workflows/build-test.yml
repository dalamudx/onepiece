name: OnePiece Build Test

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DALAMUD_HOME: /tmp/dalamud
      DOTNET_NOLOGO: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Download Dalamud
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -OutFile latest.zip
        Expand-Archive -Force latest.zip /tmp/dalamud

    - name: Build
      run: dotnet build -c Release

    - name: Validate repo.json format
      shell: pwsh
      run: |
        try {
          $repoArray = Get-Content "repo.json" -Raw | ConvertFrom-Json
          Write-Output "✓ repo.json is valid JSON"

          $plugin = $repoArray[0]  # Get the first plugin entry
          $requiredFields = @('Author', 'Name', 'InternalName', 'AssemblyVersion', 'RepoUrl', 'DownloadLinkInstall', 'DownloadLinkUpdate')

          foreach ($field in $requiredFields) {
            if (-not $plugin.$field) {
              Write-Error "Missing required field: $field"
              exit 1
            }
          }

          Write-Output "✓ All required fields present in repo.json"
          Write-Output "Current version: $($plugin.AssemblyVersion)"
        } catch {
          Write-Error "Invalid repo.json format: $_"
          exit 1
        }

    - name: Check version consistency
      shell: pwsh
      run: |
        # Get version from build output
        $buildJson = Get-Content "OnePiece/bin/Release/OnePiece.json" -Raw | ConvertFrom-Json
        $buildVersion = $buildJson.AssemblyVersion

        # Get version from repo.json
        $repoArray = Get-Content "repo.json" -Raw | ConvertFrom-Json
        $repoVersion = $repoArray[0].AssemblyVersion

        Write-Output "Build output version: $buildVersion"
        Write-Output "repo.json version: $repoVersion"

        if ($buildVersion -ne $repoVersion) {
          Write-Output "Version difference detected: $repoVersion -> $buildVersion"
          Write-Output "This will trigger a release when pushed to master"
        } else {
          Write-Output "✓ Versions are consistent"
        }

    - name: Test package creation
      shell: pwsh
      run: |
        $releaseDir = "OnePiece/bin/Release"
        $packageDir = "test-package"

        # Create test package directory
        New-Item -ItemType Directory -Path $packageDir -Force

        # Check required files exist
        $requiredFiles = @(
          "$releaseDir/OnePiece.dll",
          "$releaseDir/OnePiece.json",
          "$releaseDir/ECommons.dll",
          "$releaseDir/aetheryte.json"
        )

        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            Write-Output "✓ Found: $file"
            Copy-Item $file $packageDir
          } else {
            Write-Error "Missing required file: $file"
            exit 1
          }
        }

        # Check optional directories
        $optionalDirs = @(
          "$releaseDir/img",
          "$releaseDir/Localization"
        )

        foreach ($dir in $optionalDirs) {
          if (Test-Path $dir) {
            Write-Output "✓ Found: $dir"
            Copy-Item $dir $packageDir -Recurse
          } else {
            Write-Warning "Optional directory not found: $dir"
          }
        }

        # Create test zip
        Compress-Archive -Path "$packageDir/*" -DestinationPath "test-package.zip" -Force
        Write-Output "✓ Test package created successfully"

    - name: Upload test package
      uses: actions/upload-artifact@v4
      with:
        name: test-package
        path: test-package.zip
        retention-days: 7
