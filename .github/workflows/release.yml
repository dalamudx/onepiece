name: Build and Release

on:
  push:
    branches: [ "master", "main" ]
  workflow_dispatch:
    inputs:
      changelog:
        description: 'Changelog for this release (optional)'
        required: false
        type: string
        default: '- Bug fixes and improvements'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: '0.0.0.0'
      DALAMUD_HOME: /tmp/dalamud
      DOTNET_NOLOGO: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Download Dalamud
      run: |
        wget https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -O latest.zip
        unzip -o latest.zip -d /tmp/dalamud

    - name: Build
      run: dotnet build -c Release

    - name: Prepare Build Artifact
      run: |
        # Check if the plugin build system created a zip
        if [ -f "OnePiece/bin/Release/OnePiece/latest.zip" ]; then
          cp "OnePiece/bin/Release/OnePiece/latest.zip" "OnePiece.zip"
          mkdir -p Artifact
          unzip -o OnePiece.zip -d Artifact
        else
          # Create the package manually
          releaseDir="OnePiece/bin/Release"
          packageDir="Artifact"

          mkdir -p "$packageDir"

          # Copy required files
          cp "$releaseDir/OnePiece.dll" "$packageDir/" 2>/dev/null || true
          cp "$releaseDir/OnePiece.json" "$packageDir/" 2>/dev/null || true
          cp "$releaseDir/ECommons.dll" "$packageDir/" 2>/dev/null || true
          cp "$releaseDir/aetheryte.json" "$packageDir/" 2>/dev/null || true
          cp -r "$releaseDir/img" "$packageDir/" 2>/dev/null || true

          # Create zip
          cd "$packageDir"
          zip -r "../OnePiece.zip" .
          cd ..
        fi

    - name: Upload OnePiece
      uses: actions/upload-artifact@v4
      with:
        name: OnePiece
        path: Artifact/*

    - name: Update repo.json if needed
      run: |
        # Install jq for JSON processing
        sudo apt-get update && sudo apt-get install -y jq

        # Get versions
        repo_version=$(jq -r '.[0].AssemblyVersion' repo.json)
        build_version=$(jq -r '.AssemblyVersion' OnePiece/bin/Release/OnePiece.json)

        echo "Repository version: $repo_version"
        echo "Build version: $build_version"

        if [ "$repo_version" = "$build_version" ]; then
          echo "No version change detected. Current version: $repo_version"
          exit 0
        fi

        echo "Version change detected: $repo_version -> $build_version"
        echo "RELEASE_VERSION=$build_version" >> $GITHUB_ENV

        # Get current download count
        total_downloads=0
        if response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "https://api.github.com/repos/${{ github.repository }}/releases"); then
          total_downloads=$(echo "$response" | jq '[.[].assets[].download_count] | add // 0')
          echo "Current total download count: $total_downloads"
        else
          echo "Failed to get download count, using 0"
          total_downloads=0
        fi

        # Get current timestamp in milliseconds
        timestamp=$(date +%s)000

        # Use provided changelog or default
        changelog="${{ github.event.inputs.changelog }}"
        if [ -z "$changelog" ]; then
          changelog="- Bug fixes and improvements"
        fi

        # Update repo.json using jq
        jq --arg version "$build_version" \
           --arg timestamp "$timestamp" \
           --arg downloads "$total_downloads" \
           --arg changelog "$changelog" \
           --arg install_url "https://github.com/${{ github.repository }}/releases/download/v$build_version/OnePiece.zip" \
           '.[0].AssemblyVersion = $version |
            .[0].LastUpdate = ($timestamp | tonumber) |
            .[0].DownloadCount = ($downloads | tonumber) |
            .[0].Changelog = $changelog |
            .[0].DownloadLinkInstall = $install_url |
            .[0].DownloadLinkUpdate = $install_url' \
           repo.json > repo.json.tmp && mv repo.json.tmp repo.json

        echo "Updated repo.json:"
        echo "- AssemblyVersion: $build_version"
        echo "- LastUpdate: $timestamp"
        echo "- DownloadCount: $total_downloads"
        echo "- Changelog: $changelog"

    - name: Create Release
      if: ${{ env.RELEASE_VERSION != '0.0.0.0' }}
      uses: softprops/action-gh-release@v1
      with:
        files: OnePiece.zip
        name: OnePiece ${{ env.RELEASE_VERSION }}
        tag_name: v${{ env.RELEASE_VERSION }}
        prerelease: false
        append_body: true
        body: |
          ## OnePiece Plugin v${{ env.RELEASE_VERSION }}

          ### Changes
          ${{ github.event.inputs.changelog || '- Bug fixes and improvements' }}

          ### Installation
          1. Add the repository URL to your Dalamud plugin repositories:
             ```
             https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/master/repo.json
             ```
          2. Install "One Piece" from the plugin installer

          ### Manual Installation
          Download `OnePiece.zip` and extract to your Dalamud plugins directory.

          ### System Requirements
          - Final Fantasy XIV with Dalamud
          - .NET 9.0 Runtime
          - Dalamud API Level 12
        generate_release_notes: true
        fail_on_unmatched_files: true

    - name: Commit repo.json
      if: ${{ env.RELEASE_VERSION != '0.0.0.0' }}
      run: |
        git config --global user.name "Actions User"
        git config --global user.email "actions@github.com"
        git fetch origin master
        git checkout master
        git add repo.json
        git commit -m "[CI] updating repo.json for ${{ env.RELEASE_VERSION }}" || true
        git push origin master
