name: OnePiece Build and Release

on:
  push:
    branches: [ "master", "main" ]
  workflow_dispatch:
    inputs:
      changelog:
        description: 'Changelog for this release (optional)'
        required: false
        type: string
        default: '- Bug fixes and improvements'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: '0.0.0.0'
      DALAMUD_HOME: /tmp/dalamud
      DOTNET_NOLOGO: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Download Dalamud
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -OutFile latest.zip
        Expand-Archive -Force latest.zip /tmp/dalamud

    - name: Build
      run: dotnet build -c Release

    - name: Prepare Build Artifact
      shell: pwsh
      run: |
        Copy-Item "OnePiece/bin/Release/OnePiece/latest.zip" -Destination "OnePiece.zip" -ErrorAction SilentlyContinue
        if (-not (Test-Path "OnePiece.zip")) {
          # If the expected path doesn't exist, create the package manually
          $releaseDir = "OnePiece/bin/Release"
          $packageDir = "Artifact"

          New-Item -ItemType Directory -Path $packageDir -Force

          # Copy required files
          Copy-Item "$releaseDir/OnePiece.dll" $packageDir -ErrorAction SilentlyContinue
          Copy-Item "$releaseDir/OnePiece.json" $packageDir -ErrorAction SilentlyContinue
          Copy-Item "$releaseDir/ECommons.dll" $packageDir -ErrorAction SilentlyContinue
          Copy-Item "$releaseDir/aetheryte.json" $packageDir -ErrorAction SilentlyContinue
          Copy-Item "$releaseDir/img" $packageDir -Recurse -ErrorAction SilentlyContinue
          Copy-Item "$releaseDir/Localization" $packageDir -Recurse -ErrorAction SilentlyContinue

          Compress-Archive -Path "$packageDir/*" -DestinationPath "OnePiece.zip" -Force
        } else {
          Expand-Archive -Force OnePiece.zip Artifact
        }

    - name: Upload OnePiece
      uses: actions/upload-artifact@v4
      with:
        name: OnePiece
        path: Artifact/*

    - name: Update repo.json if needed
      shell: pwsh
      run: |
        $repoArray = Get-Content 'repo.json' -raw | ConvertFrom-Json
        $repo = $repoArray[0]  # Get the first (and only) plugin entry
        $build = Get-Content 'OnePiece/bin/Release/OnePiece.json' -raw | ConvertFrom-Json

        if ($repo.AssemblyVersion -eq $build.AssemblyVersion) {
          Write-Output "No version change detected. Current version: $($repo.AssemblyVersion)"
          Exit
        }

        Write-Output "Version change detected: $($repo.AssemblyVersion) -> $($build.AssemblyVersion)"
        Write-Output "RELEASE_VERSION=$($build.AssemblyVersion)" >> $env:GITHUB_ENV

        # Get current download count
        $totalDownloads = 0
        try {
          $headers = @{
            'Authorization' = 'Bearer ${{ secrets.GITHUB_TOKEN }}'
            'Accept' = 'application/vnd.github.v3+json'
          }

          $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Headers $headers

          foreach ($release in $releases) {
            foreach ($asset in $release.assets) {
              $totalDownloads += $asset.download_count
            }
          }

          Write-Output "Current total download count: $totalDownloads"
        } catch {
          Write-Warning "Failed to get download count, using 0"
          $totalDownloads = 0
        }

        # Update repo.json
        $repo.AssemblyVersion = $build.AssemblyVersion
        $repo.LastUpdate = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $repo.DownloadCount = [int]$totalDownloads

        # Use provided changelog or default
        $changelog = "${{ github.event.inputs.changelog }}"
        if ([string]::IsNullOrWhiteSpace($changelog)) {
          $changelog = "- Bug fixes and improvements"
        }
        $repo.Changelog = $changelog

        # Update download links
        $repo.DownloadLinkInstall = 'https://github.com/${{ github.repository }}/releases/download/v' + $repo.AssemblyVersion + '/OnePiece.zip'
        $repo.DownloadLinkUpdate = $repo.DownloadLinkInstall

        # Save back as array
        $repoArray[0] = $repo
        $repoArray | ConvertTo-Json -Depth 10 | Set-Content 'repo.json'

        Write-Output "Updated repo.json:"
        Write-Output "- AssemblyVersion: $($repo.AssemblyVersion)"
        Write-Output "- LastUpdate: $($repo.LastUpdate)"
        Write-Output "- DownloadCount: $($repo.DownloadCount)"
        Write-Output "- Changelog: $($repo.Changelog)"

    - name: Create Release
      if: ${{ env.RELEASE_VERSION != '0.0.0.0' }}
      uses: softprops/action-gh-release@v1
      with:
        files: OnePiece.zip
        name: OnePiece ${{ env.RELEASE_VERSION }}
        tag_name: v${{ env.RELEASE_VERSION }}
        prerelease: false
        append_body: true
        body: |
          ## OnePiece Plugin v${{ env.RELEASE_VERSION }}

          ### Changes
          ${{ github.event.inputs.changelog || '- Bug fixes and improvements' }}

          ### Installation
          1. Add the repository URL to your Dalamud plugin repositories:
             ```
             https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/master/repo.json
             ```
          2. Install "One Piece" from the plugin installer

          ### Manual Installation
          Download `OnePiece.zip` and extract to your Dalamud plugins directory.

          ### System Requirements
          - Final Fantasy XIV with Dalamud
          - .NET 9.0 Runtime
          - Dalamud API Level 12
        generate_release_notes: true
        fail_on_unmatched_files: true

    - name: Commit repo.json
      if: ${{ env.RELEASE_VERSION != '0.0.0.0' }}
      run: |
        git config --global user.name "Actions User"
        git config --global user.email "actions@github.com"
        git fetch origin master
        git checkout master
        git add repo.json
        git commit -m "[CI] updating repo.json for ${{ env.RELEASE_VERSION }}" || true
        git push origin master
